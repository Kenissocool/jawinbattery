
g474_bmsv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e78  08002e78  00003e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002e98  08002e98  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002e98  08002e98  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00003e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ea0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002eac  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002eac  00004118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fa2  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aed  00000000  00000000  0000cfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0000ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000687  00000000  00000000  0000f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024290  00000000  00000000  0000fa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a131  00000000  00000000  00033cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e47c1  00000000  00000000  0003ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001225b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002324  00000000  00000000  001225fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00124920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002e60 	.word	0x08002e60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002e60 	.word	0x08002e60

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2iz>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000598:	d215      	bcs.n	80005c6 <__aeabi_d2iz+0x36>
 800059a:	d511      	bpl.n	80005c0 <__aeabi_d2iz+0x30>
 800059c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80005a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005a4:	d912      	bls.n	80005cc <__aeabi_d2iz+0x3c>
 80005a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005b6:	fa23 f002 	lsr.w	r0, r3, r2
 80005ba:	bf18      	it	ne
 80005bc:	4240      	negne	r0, r0
 80005be:	4770      	bx	lr
 80005c0:	f04f 0000 	mov.w	r0, #0
 80005c4:	4770      	bx	lr
 80005c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005ca:	d105      	bne.n	80005d8 <__aeabi_d2iz+0x48>
 80005cc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80005d0:	bf08      	it	eq
 80005d2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80005d6:	4770      	bx	lr
 80005d8:	f04f 0000 	mov.w	r0, #0
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <MX_FDCAN1_Init+0x88>)
 80005e8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 80005fe:	2200      	movs	r2, #0
 8000600:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000604:	2200      	movs	r2, #0
 8000606:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 800060a:	2200      	movs	r2, #0
 800060c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000610:	2211      	movs	r2, #17
 8000612:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 800061c:	2208      	movs	r2, #8
 800061e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000622:	2201      	movs	r2, #1
 8000624:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000628:	2201      	movs	r2, #1
 800062a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 800062e:	2201      	movs	r2, #1
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000634:	2201      	movs	r2, #1
 8000636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 800063a:	2201      	movs	r2, #1
 800063c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000640:	2200      	movs	r2, #0
 8000642:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000646:	2200      	movs	r2, #0
 8000648:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_FDCAN1_Init+0x84>)
 8000652:	f000 fbb5 	bl	8000dc0 <HAL_FDCAN_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800065c:	f000 f98f 	bl	800097e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028
 8000668:	40006400 	.word	0x40006400

0800066c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09e      	sub	sp, #120	@ 0x78
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	2254      	movs	r2, #84	@ 0x54
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fbbb 	bl	8002e08 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a24      	ldr	r2, [pc, #144]	@ (8000728 <HAL_FDCAN_MspInit+0xbc>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d141      	bne.n	8000720 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800069c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f82b 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80006b8:	f000 f961 	bl	800097e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <HAL_FDCAN_MspInit+0xc0>)
 80006be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c0:	4a1a      	ldr	r2, [pc, #104]	@ (800072c <HAL_FDCAN_MspInit+0xc0>)
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <HAL_FDCAN_MspInit+0xc0>)
 80006ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <HAL_FDCAN_MspInit+0xc0>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d8:	4a14      	ldr	r2, [pc, #80]	@ (800072c <HAL_FDCAN_MspInit+0xc0>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HAL_FDCAN_MspInit+0xc0>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006fe:	2309      	movs	r3, #9
 8000700:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000706:	4619      	mov	r1, r3
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f001 f8d0 	bl	80018b0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2015      	movs	r0, #21
 8000716:	f000 fb1e 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800071a:	2015      	movs	r0, #21
 800071c:	f000 fb35 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	3778      	adds	r7, #120	@ 0x78
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40006400 	.word	0x40006400
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	@ 0x28
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b40      	ldr	r3, [pc, #256]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a3f      	ldr	r2, [pc, #252]	@ (8000848 <MX_GPIO_Init+0x118>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b3d      	ldr	r3, [pc, #244]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b3a      	ldr	r3, [pc, #232]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a39      	ldr	r2, [pc, #228]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b37      	ldr	r3, [pc, #220]	@ (8000848 <MX_GPIO_Init+0x118>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	4b34      	ldr	r3, [pc, #208]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a33      	ldr	r2, [pc, #204]	@ (8000848 <MX_GPIO_Init+0x118>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a2d      	ldr	r2, [pc, #180]	@ (8000848 <MX_GPIO_Init+0x118>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <MX_GPIO_Init+0x118>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <MX_GPIO_Init+0x118>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <MX_GPIO_Init+0x118>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_GPIO_Init+0x118>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC6 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80007be:	f64e 4350 	movw	r3, #60496	@ 0xec50
 80007c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c4:	2303      	movs	r3, #3
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	481e      	ldr	r0, [pc, #120]	@ (800084c <MX_GPIO_Init+0x11c>)
 80007d4:	f001 f86c 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d8:	2303      	movs	r3, #3
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007dc:	2303      	movs	r3, #3
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4819      	ldr	r0, [pc, #100]	@ (8000850 <MX_GPIO_Init+0x120>)
 80007ec:	f001 f860 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <MX_GPIO_Init+0x124>)
 8000806:	f001 f853 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800080a:	f248 73ff 	movw	r3, #34815	@ 0x87ff
 800080e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000822:	f001 f845 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082c:	2303      	movs	r3, #3
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4807      	ldr	r0, [pc, #28]	@ (8000858 <MX_GPIO_Init+0x128>)
 800083c:	f001 f838 	bl	80018b0 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	@ 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800
 8000850:	48001400 	.word	0x48001400
 8000854:	48001800 	.word	0x48001800
 8000858:	48000400 	.word	0x48000400

0800085c <HAL_FDCAN_RxFifo0Callback>:

//int datacheck = 0;
//int firsttimes = 1;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <HAL_FDCAN_RxFifo0Callback+0x20>
    {
        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <HAL_FDCAN_RxFifo0Callback+0x28>)
 8000872:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 fc24 	bl	80010c4 <HAL_FDCAN_GetRxMessage>

        // Optional: blink LED or set a flag
    }
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000d8 	.word	0x200000d8
 8000888:	200000b0 	.word	0x200000b0

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f000 f914 	bl	8000abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f827 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f7ff ff49 	bl	8000730 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800089e:	f7ff fe9f 	bl	80005e0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 80008a2:	480e      	ldr	r0, [pc, #56]	@ (80008dc <main+0x50>)
 80008a4:	f000 fbe6 	bl	8001074 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2101      	movs	r1, #1
 80008ac:	480b      	ldr	r0, [pc, #44]	@ (80008dc <main+0x50>)
 80008ae:	f000 fd11 	bl	80012d4 <HAL_FDCAN_ActivateNotification>

   TxHeader.IdType = FDCAN_EXTENDED_ID;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <main+0x54>)
 80008b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b8:	605a      	str	r2, [r3, #4]
   TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <main+0x54>)
 80008bc:	2208      	movs	r2, #8
 80008be:	60da      	str	r2, [r3, #12]
   TxHeader.Identifier = 0x18FF50E5;   // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <main+0x54>)
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <main+0x58>)
 80008c4:	601a      	str	r2, [r3, #0]
   TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <main+0x54>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BMS_Update(&hfdcan1);
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <main+0x50>)
 80008ce:	f002 f973 	bl	8002bb8 <BMS_Update>
	  BatteryMsg* data = BMS_GetData();
 80008d2:	f002 f967 	bl	8002ba4 <BMS_GetData>
 80008d6:	6078      	str	r0, [r7, #4]
  {
 80008d8:	bf00      	nop
 80008da:	e7f7      	b.n	80008cc <main+0x40>
 80008dc:	20000028 	.word	0x20000028
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	18ff50e5 	.word	0x18ff50e5

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	2238      	movs	r2, #56	@ 0x38
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fa86 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800090a:	2000      	movs	r0, #0
 800090c:	f001 f952 	bl	8001bb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091a:	2340      	movs	r3, #64	@ 0x40
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000926:	2304      	movs	r3, #4
 8000928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800092a:	2355      	movs	r3, #85	@ 0x55
 800092c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000936:	2302      	movs	r3, #2
 8000938:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f9ec 	bl	8001d1c <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800094a:	f000 f818 	bl	800097e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2104      	movs	r1, #4
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fcea 	bl	8002340 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000972:	f000 f804 	bl	800097e <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	@ 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000982:	b672      	cpsid	i
}
 8000984:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000986:	bf00      	nop
 8000988:	e7fd      	b.n	8000986 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <HAL_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6613      	str	r3, [r2, #96]	@ 0x60
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009c2:	f001 f99b 	bl	8001cfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 f89b 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <FDCAN1_IT0_IRQHandler+0x10>)
 8000a3a:	f000 fd31 	bl	80014a0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000028 	.word	0x20000028

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	@ (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f002 f9bd 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fef5 	bl	800088c <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	20000118 	.word	0x20000118

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>

08000abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f939 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f80e 	bl	8000af0 <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae0:	f7ff ff54 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_InitTick+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d022      	beq.n	8000b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_InitTick+0x6c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <HAL_InitTick+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f944 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d809      	bhi.n	8000b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	f000 f910 	bl	8000d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_InitTick+0x70>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e004      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	200000e0 	.word	0x200000e0
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200000e0 	.word	0x200000e0

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff40 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff90 	bl	8000c94 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5f 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff33 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa4 	bl	8000cfc <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e147      	b.n	8001062 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fc40 	bl	800066c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	699a      	ldr	r2, [r3, #24]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0210 	bic.w	r2, r2, #16
 8000dfa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfc:	f7ff fec4 	bl	8000b88 <HAL_GetTick>
 8000e00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e02:	e012      	b.n	8000e2a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e04:	f7ff fec0 	bl	8000b88 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b0a      	cmp	r3, #10
 8000e10:	d90b      	bls.n	8000e2a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2203      	movs	r2, #3
 8000e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e11b      	b.n	8001062 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d0e5      	beq.n	8000e04 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e48:	f7ff fe9e 	bl	8000b88 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e4e:	e012      	b.n	8000e76 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e50:	f7ff fe9a 	bl	8000b88 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90b      	bls.n	8000e76 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	f043 0201 	orr.w	r2, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0f5      	b.n	8001062 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0e5      	beq.n	8000e50 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0202 	orr.w	r2, r2, #2
 8000e92:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a74      	ldr	r2, [pc, #464]	@ (800106c <HAL_FDCAN_Init+0x2ac>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d103      	bne.n	8000ea6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e9e:	4a74      	ldr	r2, [pc, #464]	@ (8001070 <HAL_FDCAN_Init+0x2b0>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7c1b      	ldrb	r3, [r3, #16]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d108      	bne.n	8000ec0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ebc:	619a      	str	r2, [r3, #24]
 8000ebe:	e007      	b.n	8000ed0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ece:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7c5b      	ldrb	r3, [r3, #17]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ee6:	619a      	str	r2, [r3, #24]
 8000ee8:	e007      	b.n	8000efa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000ef8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7c9b      	ldrb	r3, [r3, #18]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f10:	619a      	str	r2, [r3, #24]
 8000f12:	e007      	b.n	8000f24 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f22:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000f48:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0210 	bic.w	r2, r2, #16
 8000f58:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d108      	bne.n	8000f74 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	699a      	ldr	r2, [r3, #24]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0204 	orr.w	r2, r2, #4
 8000f70:	619a      	str	r2, [r3, #24]
 8000f72:	e02c      	b.n	8000fce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d028      	beq.n	8000fce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d01c      	beq.n	8000fbe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	699a      	ldr	r2, [r3, #24]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f92:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0210 	orr.w	r2, r2, #16
 8000fa2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d110      	bne.n	8000fce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	699a      	ldr	r2, [r3, #24]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0220 	orr.w	r2, r2, #32
 8000fba:	619a      	str	r2, [r3, #24]
 8000fbc:	e007      	b.n	8000fce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0220 	orr.w	r2, r2, #32
 8000fcc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fde:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fe6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ff6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ff8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001002:	d115      	bne.n	8001030 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001008:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100e:	3b01      	subs	r3, #1
 8001010:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001012:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	3b01      	subs	r3, #1
 800101a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800101c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	3b01      	subs	r3, #1
 8001026:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800102c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800102e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fbc6 	bl	80017d8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40006400 	.word	0x40006400
 8001070:	40006500 	.word	0x40006500

08001074 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d110      	bne.n	80010aa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2202      	movs	r2, #2
 800108c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e006      	b.n	80010b8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ae:	f043 0204 	orr.w	r2, r3, #4
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
  }
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b08b      	sub	sp, #44	@ 0x2c
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010dc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80010de:	7efb      	ldrb	r3, [r7, #27]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	f040 80e8 	bne.w	80012b6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b40      	cmp	r3, #64	@ 0x40
 80010ea:	d137      	bne.n	800115c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d107      	bne.n	800110c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001100:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0db      	b.n	80012c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d10a      	bne.n	8001134 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800112a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800112e:	d101      	bne.n	8001134 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	4413      	add	r3, r2
 8001146:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
 800115a:	e036      	b.n	80011ca <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001170:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0a3      	b.n	80012c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800118c:	d10a      	bne.n	80011a4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800119e:	d101      	bne.n	80011a4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4413      	add	r3, r2
 80011b6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d107      	bne.n	80011ee <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e005      	b.n	80011fa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	3304      	adds	r3, #4
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	0c1b      	lsrs	r3, r3, #16
 8001228:	f003 020f 	and.w	r2, r3, #15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800123c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0e1b      	lsrs	r3, r3, #24
 800124e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0fda      	lsrs	r2, r3, #31
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	3304      	adds	r3, #4
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00a      	b.n	8001286 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	441a      	add	r2, r3
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	440b      	add	r3, r1
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	3301      	adds	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4a11      	ldr	r2, [pc, #68]	@ (80012d0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	461a      	mov	r2, r3
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	4293      	cmp	r3, r2
 8001294:	d3ec      	bcc.n	8001270 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b40      	cmp	r3, #64	@ 0x40
 800129a:	d105      	bne.n	80012a8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80012a6:	e004      	b.n	80012b2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e006      	b.n	80012c4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ba:	f043 0208 	orr.w	r2, r3, #8
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
  }
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	372c      	adds	r7, #44	@ 0x2c
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	08002e88 	.word	0x08002e88

080012d4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80012e6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d003      	beq.n	80012f6 <HAL_FDCAN_ActivateNotification+0x22>
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	f040 80c8 	bne.w	8001486 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d03b      	beq.n	800138a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d031      	beq.n	800138a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	d027      	beq.n	800138a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01d      	beq.n	800138a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	d013      	beq.n	800138a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00c      	beq.n	800139a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d13b      	bne.n	8001426 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d131      	bne.n	8001426 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d127      	bne.n	8001426 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11d      	bne.n	8001426 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d113      	bne.n	8001426 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00c      	beq.n	8001436 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0202 	orr.w	r2, r2, #2
 8001434:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	430a      	orrs	r2, r1
 8001450:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d009      	beq.n	8001472 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	430a      	orrs	r2, r1
 800146e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	430a      	orrs	r2, r1
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e006      	b.n	8001494 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	f043 0202 	orr.w	r2, r3, #2
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
  }
}
 8001494:	4618      	mov	r0, r3
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	@ 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ae:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014bc:	4013      	ands	r3, r2
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014d4:	4013      	ands	r3, r2
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ec:	4013      	ands	r3, r2
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80014fa:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	4013      	ands	r3, r2
 8001506:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800150e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001512:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	4013      	ands	r3, r2
 800151e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001526:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800152e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	099b      	lsrs	r3, r3, #6
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00c      	beq.n	8001556 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	099b      	lsrs	r3, r3, #6
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f922 	bl	800179a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01a      	beq.n	8001598 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d014      	beq.n	8001598 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001576:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800158e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8e2 	bl	800175c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80015a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f8ac 	bl	8001706 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80015ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80015bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff f94c 	bl	800085c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80015d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8a1 	bl	800171c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	0a5b      	lsrs	r3, r3, #9
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00d      	beq.n	8001602 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	0a5b      	lsrs	r3, r3, #9
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f898 	bl	8001732 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	09db      	lsrs	r3, r3, #7
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d019      	beq.n	8001642 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	09db      	lsrs	r3, r3, #7
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d013      	beq.n	8001642 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001622:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800163a:	68f9      	ldr	r1, [r7, #12]
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f882 	bl	8001746 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	0b5b      	lsrs	r3, r3, #13
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00d      	beq.n	800166a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	0b5b      	lsrs	r3, r3, #13
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001662:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f884 	bl	8001772 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	0bdb      	lsrs	r3, r3, #15
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00d      	beq.n	8001692 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	0bdb      	lsrs	r3, r3, #15
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800168a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f87a 	bl	8001786 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	0b9b      	lsrs	r3, r3, #14
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d010      	beq.n	80016c0 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	0b9b      	lsrs	r3, r3, #14
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00a      	beq.n	80016c0 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80016ce:	69f9      	ldr	r1, [r7, #28]
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f876 	bl	80017c2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a3a      	ldr	r2, [r7, #32]
 80016e2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f858 	bl	80017ae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	@ 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80017e0:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80017e2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2f      	ldr	r2, [pc, #188]	@ (80018a8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d103      	bne.n	80017f6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80017f4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a2c      	ldr	r2, [pc, #176]	@ (80018ac <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d103      	bne.n	8001808 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001806:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001816:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181e:	041a      	lsls	r2, r3, #16
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800183c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001844:	061a      	lsls	r2, r3, #24
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e005      	b.n	800188a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3304      	adds	r3, #4
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	429a      	cmp	r2, r3
 8001894:	d3f3      	bcc.n	800187e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	4000a400 	.word	0x4000a400
 80018a8:	40006800 	.word	0x40006800
 80018ac:	40006c00 	.word	0x40006c00

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018be:	e15a      	b.n	8001b76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 814c 	beq.w	8001b70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	6939      	ldr	r1, [r7, #16]
 80019de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0203 	and.w	r2, r3, #3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80a6 	beq.w	8001b70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <HAL_GPIO_Init+0x2e4>)
 8001a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a28:	4a5a      	ldr	r2, [pc, #360]	@ (8001b94 <HAL_GPIO_Init+0x2e4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a30:	4b58      	ldr	r3, [pc, #352]	@ (8001b94 <HAL_GPIO_Init+0x2e4>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3c:	4a56      	ldr	r2, [pc, #344]	@ (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a66:	d01f      	beq.n	8001aa8 <HAL_GPIO_Init+0x1f8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b9c <HAL_GPIO_Init+0x2ec>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d019      	beq.n	8001aa4 <HAL_GPIO_Init+0x1f4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba0 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_GPIO_Init+0x1f0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba4 <HAL_GPIO_Init+0x2f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00d      	beq.n	8001a9c <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a49      	ldr	r2, [pc, #292]	@ (8001ba8 <HAL_GPIO_Init+0x2f8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a48      	ldr	r2, [pc, #288]	@ (8001bac <HAL_GPIO_Init+0x2fc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a90:	2305      	movs	r3, #5
 8001a92:	e00a      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a94:	2306      	movs	r3, #6
 8001a96:	e008      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aba:	4937      	ldr	r1, [pc, #220]	@ (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac8:	4b39      	ldr	r3, [pc, #228]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aec:	4a30      	ldr	r2, [pc, #192]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001af2:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b16:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b40:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b6a:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f ae9d 	bne.w	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48000800 	.word	0x48000800
 8001ba4:	48000c00 	.word	0x48000c00
 8001ba8:	48001000 	.word	0x48001000
 8001bac:	48001400 	.word	0x48001400
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d141      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bce:	d131      	bne.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b47      	ldr	r3, [pc, #284]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bd6:	4a46      	ldr	r2, [pc, #280]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be0:	4b43      	ldr	r3, [pc, #268]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001be8:	4a41      	ldr	r2, [pc, #260]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf0:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2232      	movs	r2, #50	@ 0x32
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	0c9b      	lsrs	r3, r3, #18
 8001c02:	3301      	adds	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c06:	e002      	b.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0e:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1a:	d102      	bne.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f2      	bne.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c22:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c2e:	d158      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e057      	b.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c44:	e04d      	b.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c4c:	d141      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4e:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5a:	d131      	bne.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c62:	4a23      	ldr	r2, [pc, #140]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6c:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c74:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2232      	movs	r2, #50	@ 0x32
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	0c9b      	lsrs	r3, r3, #18
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c92:	e002      	b.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca6:	d102      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f2      	bne.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d112      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e011      	b.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cd0:	e007      	b.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	431bde83 	.word	0x431bde83

08001cfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0a:	6093      	str	r3, [r2, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000

08001d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e2fe      	b.n	800232c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d075      	beq.n	8001e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b97      	ldr	r3, [pc, #604]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d44:	4b94      	ldr	r3, [pc, #592]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3e>
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_OscConfig+0x44>
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d10b      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	4b8d      	ldr	r3, [pc, #564]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d05b      	beq.n	8001e24 <HAL_RCC_OscConfig+0x108>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d157      	bne.n	8001e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e2d9      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d80:	d106      	bne.n	8001d90 <HAL_RCC_OscConfig+0x74>
 8001d82:	4b85      	ldr	r3, [pc, #532]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a84      	ldr	r2, [pc, #528]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xb0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x98>
 8001d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b7c      	ldr	r3, [pc, #496]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7b      	ldr	r2, [pc, #492]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xb0>
 8001db4:	4b78      	ldr	r3, [pc, #480]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a77      	ldr	r2, [pc, #476]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b75      	ldr	r3, [pc, #468]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a74      	ldr	r2, [pc, #464]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fed8 	bl	8000b88 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fed4 	bl	8000b88 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e29e      	b.n	800232c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	4b6a      	ldr	r3, [pc, #424]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xc0>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe fec4 	bl	8000b88 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7fe fec0 	bl	8000b88 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e28a      	b.n	800232c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	4b60      	ldr	r3, [pc, #384]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0xe8>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d075      	beq.n	8001f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e32:	4b59      	ldr	r3, [pc, #356]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e3c:	4b56      	ldr	r3, [pc, #344]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_OscConfig+0x136>
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_OscConfig+0x13c>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11f      	bne.n	8001e98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e58:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x154>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e25d      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b49      	ldr	r3, [pc, #292]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	4946      	ldr	r1, [pc, #280]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e84:	4b45      	ldr	r3, [pc, #276]	@ (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fe31 	bl	8000af0 <HAL_InitTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d043      	beq.n	8001f1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e249      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fe6c 	bl	8000b88 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7fe fe68 	bl	8000b88 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e232      	b.n	800232c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec6:	4b34      	ldr	r3, [pc, #208]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	492d      	ldr	r1, [pc, #180]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
 8001ee6:	e01a      	b.n	8001f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2a      	ldr	r2, [pc, #168]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fe48 	bl	8000b88 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7fe fe44 	bl	8000b88 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e20e      	b.n	800232c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1e0>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d041      	beq.n	8001fae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f38:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7fe fe21 	bl	8000b88 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7fe fe1d 	bl	8000b88 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1e7      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0ef      	beq.n	8001f4a <HAL_RCC_OscConfig+0x22e>
 8001f6a:	e020      	b.n	8001fae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7fe fe04 	bl	8000b88 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f82:	e00d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7fe fe00 	bl	8000b88 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d906      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1ca      	b.n	800232c <HAL_RCC_OscConfig+0x610>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ea      	bne.n	8001f84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80a6 	beq.w	8002108 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fc0:	4b84      	ldr	r3, [pc, #528]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2b4>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2b6>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	4a7e      	ldr	r2, [pc, #504]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	4b79      	ldr	r3, [pc, #484]	@ (80021d8 <HAL_RCC_OscConfig+0x4bc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffe:	4b76      	ldr	r3, [pc, #472]	@ (80021d8 <HAL_RCC_OscConfig+0x4bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a75      	ldr	r2, [pc, #468]	@ (80021d8 <HAL_RCC_OscConfig+0x4bc>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7fe fdbd 	bl	8000b88 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7fe fdb9 	bl	8000b88 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e183      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4b6c      	ldr	r3, [pc, #432]	@ (80021d8 <HAL_RCC_OscConfig+0x4bc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d108      	bne.n	800204a <HAL_RCC_OscConfig+0x32e>
 8002038:	4b66      	ldr	r3, [pc, #408]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a65      	ldr	r2, [pc, #404]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002048:	e024      	b.n	8002094 <HAL_RCC_OscConfig+0x378>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b05      	cmp	r3, #5
 8002050:	d110      	bne.n	8002074 <HAL_RCC_OscConfig+0x358>
 8002052:	4b60      	ldr	r3, [pc, #384]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002058:	4a5e      	ldr	r2, [pc, #376]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002062:	4b5c      	ldr	r3, [pc, #368]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002068:	4a5a      	ldr	r2, [pc, #360]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002072:	e00f      	b.n	8002094 <HAL_RCC_OscConfig+0x378>
 8002074:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207a:	4a56      	ldr	r2, [pc, #344]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002084:	4b53      	ldr	r3, [pc, #332]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4a52      	ldr	r2, [pc, #328]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d016      	beq.n	80020ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fd74 	bl	8000b88 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe fd70 	bl	8000b88 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e138      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b46      	ldr	r3, [pc, #280]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ed      	beq.n	80020a4 <HAL_RCC_OscConfig+0x388>
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe fd5d 	bl	8000b88 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe fd59 	bl	8000b88 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e121      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e8:	4b3a      	ldr	r3, [pc, #232]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ed      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b35      	ldr	r3, [pc, #212]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	4a34      	ldr	r2, [pc, #208]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03c      	beq.n	800218e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01c      	beq.n	8002156 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800211c:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002122:	4a2c      	ldr	r2, [pc, #176]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7fe fd2c 	bl	8000b88 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002134:	f7fe fd28 	bl	8000b88 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0f2      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002146:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCC_OscConfig+0x418>
 8002154:	e01b      	b.n	800218e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002156:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800215c:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe fd0f 	bl	8000b88 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800216e:	f7fe fd0b 	bl	8000b88 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0d5      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 8002182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ef      	bne.n	800216e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80c9 	beq.w	800232a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	f000 8083 	beq.w	80022ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d15e      	bne.n	800226c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_RCC_OscConfig+0x4b8>)
 80021b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7fe fce5 	bl	8000b88 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c0:	e00c      	b.n	80021dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe fce1 	bl	8000b88 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d905      	bls.n	80021dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0ab      	b.n	800232c <HAL_RCC_OscConfig+0x610>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	4b55      	ldr	r3, [pc, #340]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ec      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e8:	4b52      	ldr	r3, [pc, #328]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b52      	ldr	r3, [pc, #328]	@ (8002338 <HAL_RCC_OscConfig+0x61c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6a11      	ldr	r1, [r2, #32]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021f8:	3a01      	subs	r2, #1
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002202:	0212      	lsls	r2, r2, #8
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800220a:	0852      	lsrs	r2, r2, #1
 800220c:	3a01      	subs	r2, #1
 800220e:	0552      	lsls	r2, r2, #21
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002216:	0852      	lsrs	r2, r2, #1
 8002218:	3a01      	subs	r2, #1
 800221a:	0652      	lsls	r2, r2, #25
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002222:	06d2      	lsls	r2, r2, #27
 8002224:	430a      	orrs	r2, r1
 8002226:	4943      	ldr	r1, [pc, #268]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 8002228:	4313      	orrs	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a40      	ldr	r2, [pc, #256]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002238:	4b3e      	ldr	r3, [pc, #248]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a3d      	ldr	r2, [pc, #244]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002242:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fca0 	bl	8000b88 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fc9c 	bl	8000b88 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e066      	b.n	800232c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	4b35      	ldr	r3, [pc, #212]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x530>
 800226a:	e05e      	b.n	800232a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b31      	ldr	r3, [pc, #196]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a30      	ldr	r2, [pc, #192]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fc86 	bl	8000b88 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fc82 	bl	8000b88 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e04c      	b.n	800232c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800229e:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4924      	ldr	r1, [pc, #144]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_RCC_OscConfig+0x620>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	60cb      	str	r3, [r1, #12]
 80022aa:	e03e      	b.n	800232a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e039      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002334 <HAL_RCC_OscConfig+0x618>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d12c      	bne.n	8002326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d123      	bne.n	8002326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d11b      	bne.n	8002326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d113      	bne.n	8002326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d109      	bne.n	8002326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	019f800c 	.word	0x019f800c
 800233c:	feeefffc 	.word	0xfeeefffc

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e11e      	b.n	8002596 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b91      	ldr	r3, [pc, #580]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d910      	bls.n	8002388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b8e      	ldr	r3, [pc, #568]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 020f 	bic.w	r2, r3, #15
 800236e:	498c      	ldr	r1, [pc, #560]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b8a      	ldr	r3, [pc, #552]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e106      	b.n	8002596 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d073      	beq.n	800247c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d129      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239c:	4b81      	ldr	r3, [pc, #516]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0f4      	b.n	8002596 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023ac:	f000 f966 	bl	800267c <RCC_GetSysClockFreqFromPLLSource>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4a7c      	ldr	r2, [pc, #496]	@ (80025a8 <HAL_RCC_ClockConfig+0x268>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d93f      	bls.n	800243a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ba:	4b7a      	ldr	r3, [pc, #488]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d033      	beq.n	800243a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12f      	bne.n	800243a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023da:	4b72      	ldr	r3, [pc, #456]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023e2:	4a70      	ldr	r2, [pc, #448]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80023e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e024      	b.n	800243a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f8:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0c6      	b.n	8002596 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	4b66      	ldr	r3, [pc, #408]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0be      	b.n	8002596 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002418:	f000 f8ce 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 800241c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4a61      	ldr	r2, [pc, #388]	@ (80025a8 <HAL_RCC_ClockConfig+0x268>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d909      	bls.n	800243a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002426:	4b5f      	ldr	r3, [pc, #380]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800242e:	4a5d      	ldr	r2, [pc, #372]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002434:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b5a      	ldr	r3, [pc, #360]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4957      	ldr	r1, [pc, #348]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244c:	f7fe fb9c 	bl	8000b88 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fb98 	bl	8000b88 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e095      	b.n	8002596 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d023      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b43      	ldr	r3, [pc, #268]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a42      	ldr	r2, [pc, #264]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 800249a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800249e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024ac:	4b3d      	ldr	r3, [pc, #244]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024b4:	4a3b      	ldr	r2, [pc, #236]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b39      	ldr	r3, [pc, #228]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4936      	ldr	r1, [pc, #216]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b80      	cmp	r3, #128	@ 0x80
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024d6:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4a32      	ldr	r2, [pc, #200]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e2:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d21d      	bcs.n	800252c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 020f 	bic.w	r2, r3, #15
 80024f8:	4929      	ldr	r1, [pc, #164]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002500:	f7fe fb42 	bl	8000b88 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7fe fb3e 	bl	8000b88 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e03b      	b.n	8002596 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d1ed      	bne.n	8002508 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4917      	ldr	r1, [pc, #92]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490f      	ldr	r1, [pc, #60]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256a:	f000 f825 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490c      	ldr	r1, [pc, #48]	@ (80025ac <HAL_RCC_ClockConfig+0x26c>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <HAL_RCC_ClockConfig+0x270>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_RCC_ClockConfig+0x274>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe faae 	bl	8000af0 <HAL_InitTick>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	04c4b400 	.word	0x04c4b400
 80025ac:	08002e78 	.word	0x08002e78
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025be:	4b2c      	ldr	r3, [pc, #176]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d102      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	e047      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025d0:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025dc:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	e03e      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025e2:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	d136      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3301      	adds	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800260c:	4a1a      	ldr	r2, [pc, #104]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xc0>)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	4a16      	ldr	r2, [pc, #88]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002616:	68d2      	ldr	r2, [r2, #12]
 8002618:	0a12      	lsrs	r2, r2, #8
 800261a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
      break;
 8002624:	e00c      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002626:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4a10      	ldr	r2, [pc, #64]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	68d2      	ldr	r2, [r2, #12]
 8002632:	0a12      	lsrs	r2, r2, #8
 8002634:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
      break;
 800263e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0e5b      	lsrs	r3, r3, #25
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e001      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002660:	693b      	ldr	r3, [r7, #16]
}
 8002662:	4618      	mov	r0, r3
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	00f42400 	.word	0x00f42400
 8002678:	007a1200 	.word	0x007a1200

0800267c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3301      	adds	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d10c      	bne.n	80026ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a0:	4a17      	ldr	r2, [pc, #92]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026aa:	68d2      	ldr	r2, [r2, #12]
 80026ac:	0a12      	lsrs	r2, r2, #8
 80026ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
    break;
 80026b8:	e00c      	b.n	80026d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4a0e      	ldr	r2, [pc, #56]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c4:	68d2      	ldr	r2, [r2, #12]
 80026c6:	0a12      	lsrs	r2, r2, #8
 80026c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    break;
 80026d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0e5b      	lsrs	r3, r3, #25
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	3301      	adds	r3, #1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ee:	687b      	ldr	r3, [r7, #4]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40021000 	.word	0x40021000
 8002700:	007a1200 	.word	0x007a1200
 8002704:	00f42400 	.word	0x00f42400

08002708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002710:	2300      	movs	r3, #0
 8002712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002714:	2300      	movs	r3, #0
 8002716:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8098 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272a:	4b43      	ldr	r3, [pc, #268]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b40      	ldr	r3, [pc, #256]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	4a3f      	ldr	r2, [pc, #252]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	@ 0x58
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002752:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a39      	ldr	r2, [pc, #228]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800275e:	f7fe fa13 	bl	8000b88 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002764:	e009      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7fe fa0f 	bl	8000b88 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d902      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	74fb      	strb	r3, [r7, #19]
        break;
 8002778:	e005      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277a:	4b30      	ldr	r3, [pc, #192]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ef      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d159      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002796:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01e      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d019      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a8:	4b23      	ldr	r3, [pc, #140]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b4:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d4:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe f9cf 	bl	8000b88 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ec:	e00b      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe f9cb 	bl	8000b88 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d902      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	74fb      	strb	r3, [r7, #19]
            break;
 8002804:	e006      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ec      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281a:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002828:	4903      	ldr	r1, [pc, #12]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002830:	e008      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	74bb      	strb	r3, [r7, #18]
 8002836:	e005      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002844:	7c7b      	ldrb	r3, [r7, #17]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	4aa6      	ldr	r2, [pc, #664]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002862:	4ba1      	ldr	r3, [pc, #644]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	499d      	ldr	r1, [pc, #628]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002884:	4b98      	ldr	r3, [pc, #608]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	f023 020c 	bic.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4995      	ldr	r1, [pc, #596]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a6:	4b90      	ldr	r3, [pc, #576]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	498c      	ldr	r1, [pc, #560]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c8:	4b87      	ldr	r3, [pc, #540]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4984      	ldr	r1, [pc, #528]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	497b      	ldr	r1, [pc, #492]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800290c:	4b76      	ldr	r3, [pc, #472]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4973      	ldr	r1, [pc, #460]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	496a      	ldr	r1, [pc, #424]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002950:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4962      	ldr	r1, [pc, #392]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002972:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	4959      	ldr	r1, [pc, #356]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002994:	4b54      	ldr	r3, [pc, #336]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	4951      	ldr	r1, [pc, #324]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	4948      	ldr	r1, [pc, #288]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d8:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4940      	ldr	r1, [pc, #256]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1e:	4932      	ldr	r1, [pc, #200]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d015      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a56:	4924      	ldr	r1, [pc, #144]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	4916      	ldr	r1, [pc, #88]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a10      	ldr	r2, [pc, #64]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aaa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d019      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4908      	ldr	r1, [pc, #32]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ad6:	d109      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b03      	ldr	r3, [pc, #12]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a02      	ldr	r2, [pc, #8]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
 8002ae4:	e002      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002af8:	4b29      	ldr	r3, [pc, #164]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	4926      	ldr	r1, [pc, #152]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b18:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b22:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3e:	4918      	ldr	r1, [pc, #96]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	490a      	ldr	r1, [pc, #40]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <BMS_GetData>:
// Internal battery message structure to store decoded values
static BatteryMsg batterymsg;

// Return a pointer to the current battery data structure
BatteryMsg* BMS_GetData(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
    return &batterymsg;
 8002ba8:	4b02      	ldr	r3, [pc, #8]	@ (8002bb4 <BMS_GetData+0x10>)
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	200000e8 	.word	0x200000e8

08002bb8 <BMS_Update>:

// Read and decode CAN messages from the battery via FDCAN
void BMS_Update(FDCAN_HandleTypeDef *hfdcan)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b094      	sub	sp, #80	@ 0x50
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	// Check if a new CAN message is available in RX FIFO0
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	f107 0214 	add.w	r2, r7, #20
 8002bc8:	2140      	movs	r1, #64	@ 0x40
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe fa7a 	bl	80010c4 <HAL_FDCAN_GetRxMessage>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 8101 	bne.w	8002dda <BMS_Update+0x222>
	{
		// Store current timestamp for timeout or freshness check
		last_update_ms = HAL_GetTick();
 8002bd8:	f7fd ffd6 	bl	8000b88 <HAL_GetTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4a81      	ldr	r2, [pc, #516]	@ (8002de4 <BMS_Update+0x22c>)
 8002be0:	6013      	str	r3, [r2, #0]

		// Decode total pack voltage and current
		if (RxHeader.Identifier == 0x002E0951)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	4a80      	ldr	r2, [pc, #512]	@ (8002de8 <BMS_Update+0x230>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d120      	bne.n	8002c2c <BMS_Update+0x74>
		{
		    // Total voltage (16-bit, little endian)
		    batterymsg.sumvoltage = RxData[3] << 8 | RxData[2];
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	b21a      	sxth	r2, r3
 8002bf2:	7bbb      	ldrb	r3, [r7, #14]
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	4b7b      	ldr	r3, [pc, #492]	@ (8002dec <BMS_Update+0x234>)
 8002bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

		    // Convert raw 2 bytes directly to signed 16-bit int
		    int16_t raw_current = (int16_t)(RxData[5] << 8 | RxData[6]);
 8002c00:	7c7b      	ldrb	r3, [r7, #17]
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	7cbb      	ldrb	r3, [r7, #18]
 8002c0a:	b21b      	sxth	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

		    // Store as double for precision or scaling later
		    batterymsg.current = (double)raw_current;
 8002c10:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fc51 	bl	80004bc <__aeabi_i2d>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd fcb5 	bl	8000590 <__aeabi_d2iz>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a70      	ldr	r2, [pc, #448]	@ (8002dec <BMS_Update+0x234>)
 8002c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}

		// Decode temperature and battery percentage
		if (RxHeader.Identifier == 0x002E0942)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	4a70      	ldr	r2, [pc, #448]	@ (8002df0 <BMS_Update+0x238>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d115      	bne.n	8002c60 <BMS_Update+0xa8>
		{
			// Temperature (16-bit, little endian)
			batterymsg.temp = RxData[1] << 8 | RxData[0];
 8002c34:	7b7b      	ldrb	r3, [r7, #13]
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	4b69      	ldr	r3, [pc, #420]	@ (8002dec <BMS_Update+0x234>)
 8002c48:	84da      	strh	r2, [r3, #38]	@ 0x26

			// Battery state of charge (percentage)
			batterymsg.batterypercentage = RxData[5] << 8 | RxData[4];
 8002c4a:	7c7b      	ldrb	r3, [r7, #17]
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	b21a      	sxth	r2, r3
 8002c52:	7c3b      	ldrb	r3, [r7, #16]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	4b63      	ldr	r3, [pc, #396]	@ (8002dec <BMS_Update+0x234>)
 8002c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
		}

		// Decode number of cells and cell voltage 1–2
		if (RxHeader.Identifier == 0x002E0943)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	4a64      	ldr	r2, [pc, #400]	@ (8002df4 <BMS_Update+0x23c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d120      	bne.n	8002caa <BMS_Update+0xf2>
		{
			batterymsg.no_of_cell = RxData[3] << 8 | RxData[2];
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	7bbb      	ldrb	r3, [r7, #14]
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dec <BMS_Update+0x234>)
 8002c7c:	849a      	strh	r2, [r3, #36]	@ 0x24
			batterymsg.batterycell[0] = RxData[5] << 8 | RxData[4];
 8002c7e:	7c7b      	ldrb	r3, [r7, #17]
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	b21a      	sxth	r2, r3
 8002c86:	7c3b      	ldrb	r3, [r7, #16]
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	4b56      	ldr	r3, [pc, #344]	@ (8002dec <BMS_Update+0x234>)
 8002c92:	801a      	strh	r2, [r3, #0]
			batterymsg.batterycell[1] = RxData[7] << 8 | RxData[6];
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	7cbb      	ldrb	r3, [r7, #18]
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	4b51      	ldr	r3, [pc, #324]	@ (8002dec <BMS_Update+0x234>)
 8002ca8:	805a      	strh	r2, [r3, #2]
		}

		// Decode cell voltages 3–6
		if (RxHeader.Identifier == 0x002E0944)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4a52      	ldr	r2, [pc, #328]	@ (8002df8 <BMS_Update+0x240>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d121      	bne.n	8002cf6 <BMS_Update+0x13e>
		{
			for (int i = 0; i <= 3; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb6:	e01b      	b.n	8002cf0 <BMS_Update+0x138>
			{
				batterymsg.batterycell[i + 2] = RxData[(2 * i) + 1] << 8 | RxData[2 * i];
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	3350      	adds	r3, #80	@ 0x50
 8002cc0:	443b      	add	r3, r7
 8002cc2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	3350      	adds	r3, #80	@ 0x50
 8002cd2:	443b      	add	r3, r7
 8002cd4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	b291      	uxth	r1, r2
 8002ce4:	4a41      	ldr	r2, [pc, #260]	@ (8002dec <BMS_Update+0x234>)
 8002ce6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i <= 3; i++)
 8002cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cec:	3301      	adds	r3, #1
 8002cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	dde0      	ble.n	8002cb8 <BMS_Update+0x100>
			}
		}

		// Decode cell voltages 7–10
		if (RxHeader.Identifier == 0x002E0945)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4a40      	ldr	r2, [pc, #256]	@ (8002dfc <BMS_Update+0x244>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d121      	bne.n	8002d42 <BMS_Update+0x18a>
		{
			for (int i = 0; i <= 3; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d02:	e01b      	b.n	8002d3c <BMS_Update+0x184>
			{
				batterymsg.batterycell[i + 6] = RxData[(2 * i) + 1] << 8 | RxData[2 * i];
 8002d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	3301      	adds	r3, #1
 8002d0a:	3350      	adds	r3, #80	@ 0x50
 8002d0c:	443b      	add	r3, r7
 8002d0e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	3350      	adds	r3, #80	@ 0x50
 8002d1e:	443b      	add	r3, r7
 8002d20:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b21a      	sxth	r2, r3
 8002d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	b291      	uxth	r1, r2
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <BMS_Update+0x234>)
 8002d32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i <= 3; i++)
 8002d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d38:	3301      	adds	r3, #1
 8002d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	dde0      	ble.n	8002d04 <BMS_Update+0x14c>
			}
		}

		// Decode cell voltages 11–14
		if (RxHeader.Identifier == 0x002E0946)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	4a2e      	ldr	r2, [pc, #184]	@ (8002e00 <BMS_Update+0x248>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d121      	bne.n	8002d8e <BMS_Update+0x1d6>
		{
			for (int i = 0; i <= 3; i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d4e:	e01b      	b.n	8002d88 <BMS_Update+0x1d0>
			{
				batterymsg.batterycell[i + 10] = RxData[(2 * i) + 1] << 8 | RxData[2 * i];
 8002d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	3301      	adds	r3, #1
 8002d56:	3350      	adds	r3, #80	@ 0x50
 8002d58:	443b      	add	r3, r7
 8002d5a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	3350      	adds	r3, #80	@ 0x50
 8002d6a:	443b      	add	r3, r7
 8002d6c:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d78:	330a      	adds	r3, #10
 8002d7a:	b291      	uxth	r1, r2
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dec <BMS_Update+0x234>)
 8002d7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i <= 3; i++)
 8002d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d84:	3301      	adds	r3, #1
 8002d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	dde0      	ble.n	8002d50 <BMS_Update+0x198>
			}
		}

		// Decode cell voltages 15–18
		if (RxHeader.Identifier == 0x002E094F)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <BMS_Update+0x24c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d121      	bne.n	8002dda <BMS_Update+0x222>
		{
			for (int i = 0; i <= 3; i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d9a:	e01b      	b.n	8002dd4 <BMS_Update+0x21c>
			{
				batterymsg.batterycell[i + 14] = RxData[(2 * i) + 1] << 8 | RxData[2 * i];
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	3301      	adds	r3, #1
 8002da2:	3350      	adds	r3, #80	@ 0x50
 8002da4:	443b      	add	r3, r7
 8002da6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	b21a      	sxth	r2, r3
 8002db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	3350      	adds	r3, #80	@ 0x50
 8002db6:	443b      	add	r3, r7
 8002db8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	b21a      	sxth	r2, r3
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc4:	330e      	adds	r3, #14
 8002dc6:	b291      	uxth	r1, r2
 8002dc8:	4a08      	ldr	r2, [pc, #32]	@ (8002dec <BMS_Update+0x234>)
 8002dca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i <= 3; i++)
 8002dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	dde0      	ble.n	8002d9c <BMS_Update+0x1e4>
			}
		}
	}
}
 8002dda:	bf00      	nop
 8002ddc:	3750      	adds	r7, #80	@ 0x50
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200000e4 	.word	0x200000e4
 8002de8:	002e0951 	.word	0x002e0951
 8002dec:	200000e8 	.word	0x200000e8
 8002df0:	002e0942 	.word	0x002e0942
 8002df4:	002e0943 	.word	0x002e0943
 8002df8:	002e0944 	.word	0x002e0944
 8002dfc:	002e0945 	.word	0x002e0945
 8002e00:	002e0946 	.word	0x002e0946
 8002e04:	002e094f 	.word	0x002e094f

08002e08 <memset>:
 8002e08:	4402      	add	r2, r0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e50 <__libc_init_array+0x38>)
 8002e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8002e54 <__libc_init_array+0x3c>)
 8002e1e:	1b64      	subs	r4, r4, r5
 8002e20:	10a4      	asrs	r4, r4, #2
 8002e22:	2600      	movs	r6, #0
 8002e24:	42a6      	cmp	r6, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	4d0b      	ldr	r5, [pc, #44]	@ (8002e58 <__libc_init_array+0x40>)
 8002e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e5c <__libc_init_array+0x44>)
 8002e2c:	f000 f818 	bl	8002e60 <_init>
 8002e30:	1b64      	subs	r4, r4, r5
 8002e32:	10a4      	asrs	r4, r4, #2
 8002e34:	2600      	movs	r6, #0
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e40:	4798      	blx	r3
 8002e42:	3601      	adds	r6, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4a:	4798      	blx	r3
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	08002e98 	.word	0x08002e98
 8002e54:	08002e98 	.word	0x08002e98
 8002e58:	08002e98 	.word	0x08002e98
 8002e5c:	08002e9c 	.word	0x08002e9c

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
